---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

interface Props {
  id: string;
  name: string;
  description: string;
  parent?: string;
}

const { id, name, description, parent } = Astro.props;

// Get all sections to find children
const allSections = await getCollection('sections');
const childSections = allSections.filter(section => section.data.parent === id);

// Get all blog posts for this section
const allPosts = await getCollection('blog');
const sectionPosts = allPosts.filter(post => post.data.sections.id === id)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Only show sections without parents at the top level
const isTopLevel = !parent;
---

{isTopLevel && (
  <section class="mb-8">
    <h2 class="mb-2 text-2xl font-bold">
      <a href={`/sections/${id}`} class="text-gradient hover:opacity-80">
        {name}
      </a>
    </h2>
    <p class="mb-4 text-gray-200">{description}</p>

    {sectionPosts.length > 0 && (
      <div class="mb-4 ml-4">
        <h3 class="mb-2 text-xl font-semibold">Posts</h3>
        <ul class="space-y-2">
          {sectionPosts.map(post => (
            <li>
              <a href={`/blog/${post.id}`} class="text-blue-400 hover:underline">
                {post.data.title}
              </a>
              <span class="ml-2 text-sm text-gray-400">
                ({post.data.pubDate.toLocaleDateString()})
              </span>
            </li>
          ))}
        </ul>
      </div>
    )}

    {childSections.length > 0 && (
      <div class="ml-4">
        <h3 class="mb-2 text-xl font-semibold">Subsections</h3>
        <div class="space-y-4">
          {childSections.map(section => (
            <Astro.self {...section.data} />
          ))}
        </div>
      </div>
    )}
  </section>
)}